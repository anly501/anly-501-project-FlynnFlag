b<-df %>%
select(-(id:entrepreneur_1000))
#as.numeric()
b
df=read_csv("D:/501/codes and outputs/data/districts.csv")
df
as.numeric(df$unemployment_rate_95)
library(tidyverse)
df=read_csv("D:/501/codes and outputs/data/districts.csv")
df
#delete all the "["and"]"
manipute<-function(x){
x<-gsub('[[]','',x)
x<-gsub('[]]','',x)
return(x)
}
df$municipality_info<-manipute(df$municipality_info)
df$unemployment_rate<-manipute(df$unemployment_rate)
df$commited_crimes<-manipute(df$commited_crimes)
df$municipality_info.str.split
#split the columns
df<-df %>%
separate(col=municipality_info,into=c("N_num_pop_0_500","N_num_pop_500_2000","N_num_pop_2000_10000","N_num_pop_10000"),sep="[,]") %>%
separate(col=unemployment_rate,into=c('unemployment_rate_95','unemployment_rate_96'),sep="[,]") %>%
separate(col=commited_crimes,into=c('commited_crimes_95','commited_crimes_96'),sep="[,]")%>%
as.numeric(df$unemployment_rate_95)
library(tidyverse)
df=read_csv("D:/501/codes and outputs/data/districts.csv")
df
#delete all the "["and"]"
manipute<-function(x){
x<-gsub('[[]','',x)
x<-gsub('[]]','',x)
return(x)
}
df$municipality_info<-manipute(df$municipality_info)
df$unemployment_rate<-manipute(df$unemployment_rate)
df$commited_crimes<-manipute(df$commited_crimes)
df$municipality_info.str.split
#split the columns
df<-df %>%
separate(col=municipality_info,into=c("N_num_pop_0_500","N_num_pop_500_2000","N_num_pop_2000_10000","N_num_pop_10000"),sep="[,]") %>%
separate(col=unemployment_rate,into=c('unemployment_rate_95','unemployment_rate_96'),sep="[,]") %>%
separate(col=commited_crimes,into=c('commited_crimes_95','commited_crimes_96'),sep="[,]")%>%
as.numeric(df$unemployment_rate_95)
p3a=ppois(11,3*4)
p3a=ppois(11,3*4)
p3a
p3b=1-ppois(0,1/4)
p3b=1-ppois(0,1/4)
p3b
p41=dnbinom(6,3,prob=0.5)
p41
p42=mean(rnbinom(10000,3,prob=0.5)==6)
p42=mean(rnbinom(10000,3,prob=0.5)==6)
p42
p43q
p43a=1 -dnbinom(5, 3, prob = 0.5)-dnbinom(4, 3, prob = 0.5)-dnbinom(3, 3, prob = 0.5) - dnbinom(2, 3, prob = 0.5)-dnbinom(1, 3, prob = 0.5)-dnbinom(0, 3, prob = 0.5)
p43a
p43a1=1 -dnbinom(5, 3, prob = 0.5)-dnbinom(4, 3, prob = 0.5)-dnbinom(3, 3, prob = 0.5) - dnbinom(2, 3, prob = 0.5)-dnbinom(1, 3, prob = 0.5)-dnbinom(0, 3, prob = 0.5)
p43a2=1-pnbinom(5,3,prob=0.5)
p43a1
p43a2
p43b=mean(rnbinom(100000,3,prob=0.5)>=6)
p43b
x <- 0:50
plot(x,dbinom(x,size=50,prob=.33),type="h")
library("extraDistr")
plot(x,dunif(x,min=0,max=50),type = 'h')
x<-0:1
plot(0:1,dbern(0:1,prob=.33),type="h")
x<--5:30
plot(x,dpois(x,lambda = 10),type="h")
x<-0:20
plot(x,dgeom(x,prob=0.5),type="h")
x<-0:20
plot(x,dhyper(x,m=45,n=30,k=20),type="h")
x<-
plot(x,dnbinom(x,size=10,prob=0.5),type="h")
correct_a1=dbinom(4,15,0.25)
correct_a2 = pbinom(4,15,.25) - pbinom(3,15,.25)
correct_a1
correct_b1=dbinom(4,15,0.25)+dbinom(3,15,0.25)+dbinom(2,15,0.25)+dbinom(1,15,0.25)+dbinom(0,15,0.25)
correct_b1
correct_c1=pbinom(4,15,0.25)
correct_c1
library(tidyverse)
library(tidyverse)
read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
df.isna()
#
is.na(df)
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#add the label column
df$label="truth"
#
is.na(df)
#see whether there is some na
is.na(df).sum()
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some na
is.na(df).sum()
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some na
sum(is.na(df))
#add the label column
df$label="truth"
#
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some na
print(sum(is.na(df)))
#add the label column
df$label="truth"
#
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some na
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#
#
df
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some missing values and duplicates
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#transform cities to country
df2$location[which(df2$location == "U.S.A")] = 'USA'
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some missing values and duplicates
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#transform cities to country
df$location[which(df2$location == "U.S.A")] = 'USA'
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some missing values and duplicates
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#transform cities to country
df$location[which(df$location == "U.S.A")] = 'USA'
df$location[which(df$location == "Washington, DC")] = 'USA'
df$location[which(df$location == "'New York, NY'")] = 'USA'
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some missing values and duplicates
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#transform cities to country
df$location[which(df$location == "U.S.A")] = 'USA'
df$location[which(df$location == "Washington, DC")] = 'USA'
df$location[which(df$location == "'New York, NY'")] = 'USA'
df$text=gsub(pattern="(f|ht)tp(s?)://\\S+","",df$text,perl=T)
write_csv(df,"../../data/01-modified-data/labeled_truth_R.csv")
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some missing values and duplicates
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#transform cities to country
df$location[which(df$location == "U.S.A")] = 'USA'
df$location[which(df$location == "Washington, DC")] = 'USA'
df$location[which(df$location == "'New York, NY'")] = 'USA'
df$text=gsub(pattern="(f|ht)tp(s?)://\\S+","",df$text,perl=T)
write_csv(df,"../../data/01-modified-data/labeled_truth_R.csv")
getwd()
pgeom(10,prob=10/1000)
1-pgeom(10,prob=10/1000)
1-pgeom(9,prob=10/1000)
pnegboin(4,100,prob=10/1000)
pnbinom(4,100,prob=10/1000)
pnbinom(100,4,prob=10/1000)
pbinom(q=10,size=20,prob=132/400)
x=1:10
y=pbinom(x,size=20,prob=132/400)
x=1:10
y=dbinom(x,size=20,prob=132/400)
sum(y)
1-sum(y)
y=dbinom(15,size=40,prob=132/(132+268))
dbinom(15,size=40,prob=132/(132+268))
pbinom(15,size=40,prob=132/(132+268))
y=dbinom(x,size=20,prob=(400-132)/400)
x=1:10
y=dbinom(x,size=20,prob=(400-132)/400)
1-sum(y)
y=pbinom(10,size=20,prob=132/400)
y=pbinom(10,size=20,prob=132/400)
1-y
y=pbinom(10,size=20,prob=(400-132)/400)
1-y
y=dhyper(10,m=268,n=132,k=20)
1-y
y=dhyper(10,m=268,n=132,k=20)
y
y=dhyper(15,m=132,n=268,k=48)
y
y=phyper(15,m=132,n=268,k=48)
y
y=phyper(15,m=132,n=268,k=40)
y
y=dhyper(15,m=132,n=268,k=40)
y
pnorm(q=60,mean=43 sd=471)-pnorm(q=40,mean=43 sd=471)
pnorm(q=60,mean=43,sd=471)-pnorm(q=40,mean=43,sd=471)
pbionm(65,560,.41)
pbinom(65,560,.41)
ppois(.5,2.5)
pnorm(q=60,mean=43,sd=471)-pnorm(q=40,mean=43,sd=471)
pnorm(q=60,mean=43,sd=21.7)-pnorm(q=40,mean=43,sd=21.7)
pgeom(q=10,prob=10/1000)
1-pgeom(q=10,prob=10/1000)
1-pgeom(q=9,prob=10/1000)
x1=runif(10000)
x2=runif(10000)
x=x1+x2
hist(x)
x1=runif(10000)
x2=runif(10000)
x=x1+x2
hist(x)
Pa<-pgamma(12,shape=4,scale=2)
Pb<-1-pgamma(5,shape=4,scale=2)
Pc<-pgamma(9,shape=4,scale=2)-pgamma(7,shape=4,scale=2)
Pd<-qgamma(.95,shape=4,scale=2)
install package('openintro')
install package('openintro')
install.package('openintro')
install packages('openintro')
install.packages('openintro')
install.packages('openintro')
library(openintro)
exam_grades<-data(exam_grades)
qqnorm(exam_grades)
library(openintro)
exam_grades<-data(exam_grades)
library(openintro)
data(exam_grades)
library(openintro)
data(exam_grades)
View(exam_grades)
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1)
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1,exam_grades$exam2)
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1)
qqnorm(exam_grades$exam2)
qqnorm(exam_grades$exam3)
qqnorm(exam_grades$course_grade)
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1,mian="exam1")
qqnorm(exam_grades$exam2)
qqnorm(exam_grades$exam3)
qqnorm(exam_grades$course_grade)
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1,main="exam1")
qqnorm(exam_grades$exam2)
qqnorm(exam_grades$exam3)
qqnorm(exam_grades$course_grade)
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1,main="exam1")
qqnorm(exam_grades$exam2,main="exam2")
qqnorm(exam_grades$exam3,main="exam3")
qqnorm(exam_grades$course_grade,main="course_grade")
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1,main="exam1")
qqnorm(exam_grades$exam2,main="exam2")
qqnorm(exam_grades$exam3,main="exam3")
qqnorm(exam_grades$course_grade,main="course grade")
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1[!is.na(exam_grades)],main="exam1")
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="exam2")
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="exam3")
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="course grade")
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1[!is.na(exam_grades)],main="exam1")
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="exam2")
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="exam3")
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="course grade")
qqline(exam_grades$exam1[!is.na(exam_grades)])
library(openintro)
data(exam_grades)
exam1=exam_grades$exam1[!is.na(exam_grades)]
qqnorm(exam1,main="exam1")
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="exam2")
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="exam3")
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="course grade")
qqline(exam1)
library(openintro)
data(exam_grades)
exam1=exam_grades$exam1[!is.na(exam_grades)]
qqnorm(exam1,main="exam1")
qqline(exam1)
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="exam2")
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="exam3")
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="course grade")
library(openintro)
data(exam_grades)
exam1=exam_grades$exam1[!is.na(exam_grades)]
qqnorm(exam1,main="exam1")
qqline(exam1)
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="exam2")
qqline(exam1)
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="exam3")
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="course grade")
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1[!is.na(exam_grades)],main="exam1")
qqline(exam_grades$exam1[!is.na(exam_grades)])
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="exam2")
qqline(exam_grades$exam2[!is.na(exam_grades)])
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="exam3")
qqline(exam_grades$exam3[!is.na(exam_grades)])
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="course grade")
qqline(exam_grades$course_grade[!is.na(exam_grades)])
plot(0:50,pbinom(0:50,50,0.4), type = 's')
lines(0:50,pnorm(0:50, mean =0, sd = 1),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l")
Pa<-pgamma(12,shape=4,scale=2)
Pb<-1-pgamma(5,shape=4,scale=2)
Pc<-pgamma(9,shape=4,scale=2)-pgamma(7,shape=4,scale=2)
Pd<-qgamma(.95,shape=4,scale=2)
plot(0:50,pbinom(0:50,50,0.4), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l")
plot(0:50,pbinom(0:50,50,0.9), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.9, sd = sqrt(50*0.9*(1-.9))),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l",col='red')
plot(0:50,pbinom(0:50,50,0.9), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.9, sd = sqrt(50*0.9*(1-.9))),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l",col='red',lwd=2)
plot(0:50,pbinom(0:50,50,0.9), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.9, sd = sqrt(50*0.9*(1-.9))),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l",col='red')
plot(0:50,pbinom(0:50,50,0.9), type = 's')
lines(0:50,pnorm(0:50, mean =50*0.9, sd = sqrt(50*0.9*(1-.9))),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l",col='red')
plot(0:50,pbinom(0:50,50,0.9), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.9, sd = sqrt(50*0.9*(1-.9))),type="l")
plot(0:50,pbinom(0:50,50,0.4), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l",col='red')
plot(0:50,pbinom(0:50,50,0.9), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.9, sd = sqrt(50*0.9*(1-.9))),type="l",col='red')
plot(0:50,pbinom(0:50,50,0.4), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l",col='red')
plot(0:50,pbinom(0:50,50,0.9), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.9, sd = sqrt(50*0.9*(1-.9))),type="l",col='red')
plot(0:15,pbinom(0:15,15,0.4), type = 's',lwd=2)
lines(0:15,pnorm(0:15, mean =15*0.4, sd = sqrt(15*0.4*(1-.4))),type="l",col='red')
plot(0:50,pbinom(0:50,50,0.4), type = 's',lwd=2)
lines(0:50,pnorm(0:50, mean =50*0.4, sd = sqrt(50*0.4*(1-.4))),type="l",col='red')
plot(0:100,pbinom(0:100,100,0.99), type = 's',lwd=2)
lines(0:100,pnorm(0:100, mean =100*0.99, sd = sqrt(100*0.99*(1-.99))),type="l",col='red')
plot(0:15,pbinom(0:15,15,0.4), type = 's',lwd=2)
lines(0:15,pnorm(0:15, mean =15*0.4, sd = sqrt(15*0.4*(1-.4))),type="l",col='red')
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0,0.04,0.01){
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0,0.04,0.01)){
qqnorm(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.04,0.01)){
qqnorm(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.04,0.01)){
qqnorm(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.04,0.01)){
qqnorm(X3^alpha)
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha)
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.01)){
qqnorm(X3^alpha)
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.01)){
qqnorm(X3^alpha,ylim=c(0,1.1))
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1))
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1),main=as.character(alpha))
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1),main=paste("aplha=",as.character(alpha))
qqline(X3^alpha)
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1),main=paste("aplha=",as.character(alpha)))
qqline(X3^alpha)
}
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1[!is.na(exam_grades)],main="the check on exam1")
qqline(exam_grades$exam1[!is.na(exam_grades)])
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="the check on exam2")
qqline(exam_grades$exam2[!is.na(exam_grades)])
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="the check on exam3")
qqline(exam_grades$exam3[!is.na(exam_grades)])
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="the check on course grade")
qqline(exam_grades$course_grade[!is.na(exam_grades)])
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some missing values and duplicates
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#transform cities to country
df$location[which(df$location == "U.S.A")] = 'USA'
df$location[which(df$location == "Washington, DC")] = 'USA'
df$location[which(df$location == "'New York, NY'")] = 'USA'
#There are urls at the end of every tweet, we need to drop them
df$text=gsub(pattern="(f|ht)tp(s?)://\\S+","",df$text,perl=T)
write_csv(df,"../../data/01-modified-data/labeled_truth_R.csv")
setwd(C:/Windows/System32/anly-501-project-FlynnFlag/codes)
setwd("C:/Windows/System32/anly-501-project-FlynnFlag/codes")
library(tidyverse)
df<-read_csv("C:/Windows/System32/anly-501-project-FlynnFlag/data/00-raw-data/truth.csv")
#see whether there is some missing values and duplicates
print(sum(is.na(df)))
print(df[duplicated(df),])
#add the label column
df$label="truth"
#transform cities to country
df$location[which(df$location == "U.S.A")] = 'USA'
df$location[which(df$location == "Washington, DC")] = 'USA'
df$location[which(df$location == "'New York, NY'")] = 'USA'
#There are urls at the end of every tweet, we need to drop them
df$text=gsub(pattern="(f|ht)tp(s?)://\\S+","",df$text,perl=T)
write_csv(df,"../../data/01-modified-data/labeled_truth_R.csv")
write_csv(df,"../../data/01-modified-data/labeled_truth_R.csv")
write_csv(df,"C:/Windows/System32/anly-501-project-FlynnFlag/data/01-modified-data/labeled_truth_R.csv)
write_csv(df,"C:/Windows/System32/anly-501-project-FlynnFlag/data/01-modified-data/labeled_truth_R.csv)
write_csv(df,"C:/Windows/System32/anly-501-project-FlynnFlag/data/01-modified-data/labeled_truth_R.csv")
