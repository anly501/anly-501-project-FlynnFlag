[
  {
    "objectID": "ARM.html",
    "href": "ARM.html",
    "title": "",
    "section": "",
    "text": "In this tab, we try to use ARM (Association Rule Mining). This tab researches on the account descrption written by the users who sending rumors(which is the “description” column in the “cleaned_rumor_manually.csv” data set) to find the features tell users tending to spread rumors"
  },
  {
    "objectID": "ARM.html#theory",
    "href": "ARM.html#theory",
    "title": "",
    "section": "Theory",
    "text": "Theory\nARM searches for the relationship between different things, recording when items happened together or they are correlated.\nThere exist 3 metrics(support, confidence, lift) when we try to find the pattern: how many instance support our rule(by calculating how often the items appear together), how confident we are for patterns observed (by calculating the given probability of the rules), and how much the items are related."
  },
  {
    "objectID": "ARM.html#method",
    "href": "ARM.html#method",
    "title": "",
    "section": "Method",
    "text": "Method\nThis part will show the workflow of training the model with the method introduced before. \n\nData Selection\nThe features we use is shown below. As mentioned before, I only choose the description of the positive instances.\n\n\nCode\nimport pandas as pd\nfrom nltk.tokenize import word_tokenize\nfrom apyori import apriori\nimport networkx as nx \nfrom nltk.corpus import stopwords\nimport matplotlib.pyplot as plt\n# read the data\ndf=pd.read_csv(\"../../data/01-modified-data/cleaned_supervised_data.csv\")\ndf=df[df[\"label\"]==1]\ndf[\"description\"].fillna(\"\",inplace=True)\n#replace the s(which is 's originally) and the t(which is 't originially) and re \ndf[\"description\"]=df[\"description\"].str.replace(\" s\",\"\")\ndf[\"description\"]=df[\"description\"].str.replace(\" t\",\"\")\ndf[\"description\"]=df[\"description\"].str.replace(\" re\",\"\")\ndf[\"description\"]=df[\"description\"].str.replace(\" w\",\"\")\n#drop \"us\" since the stopwords don't include it\ndf[\"description\"]=df[\"description\"].str.replace(\" us\",\"\")\n# drop the stopwords\ndef drop_stop(word_list):\n    return[word for word in word_list if word not in stopwords.words('english')]\n\ndf[\"description\"]=df[\"description\"].apply(word_tokenize)\ndf=df[\"description\"].apply(drop_stop)\ndf.head()\n\n\n0    [make, america, florida, let, haveome, fun, ad...\n1    [libertarian, free, markets, freepeech, elfish...\n2    [urvivor, yazidigenocide, human, rights, activ...\n3                                         [cope, fest]\n4    [feminist, cymraes, european, fbpe, fbppr, fbeie]\nName: description, dtype: object\n\n\n\n\n\nModel Building\nIn this part, three functions are firstly defined, calculating the metrics, transforming dataframe to the structure suitable for building network and visualizing respectively.\n\n\nCode\ndef reformat_results(results):\n\n    keep =[]\n    for i in range(0, len(results)):\n        for j in range(0, len(list(results[i]))):\n            if (j>1):\n                for k in range(0, len(list(results[i][j]))):\n                    if (len(results[i][j][k][0]) != 0):\n                        rhs = list(results[i][j][k][0])\n                        lhs = list(results[i][j][k][1])\n                        conf = float(results[i][j][k][2])\n                        lift = float(results[i][j][k][3])\n                        keep.append([rhs,lhs,supp,conf,supp*conf,lift])\n            if (j==1):\n                supp = results[i][j]\n\n    return pd.DataFrame(keep, columns =[\"rhs\",\"lhs\",\"supp\",\"conf\",\"supp x conf\",\"lift\"])\n\ndef convert_to_network(df):\n    print(df)\n\n    #BUILD GRAPH\n    G = nx.DiGraph()  # DIRECTED\n    for row in df.iterrows():\n        # for column in df.columns:\n        lhs=\"_\".join(row[1][0])\n        rhs=\"_\".join(row[1][1])\n        conf=row[1][3]; #print(conf)\n        if(lhs not in G.nodes): \n            G.add_node(lhs)\n        if(rhs not in G.nodes): \n            G.add_node(rhs)\n\n        edge=(lhs,rhs)\n        if edge not in G.edges:\n            G.add_edge(lhs, rhs, weight=conf)\n    return G\n\ndef plot_network(G):\n    #SPECIFIY X-Y POSITIONS FOR PLOTTING\n    pos=nx.random_layout(G)\n\n    #GENERATE PLOT\n    fig, ax = plt.subplots()\n    fig.set_size_inches(15, 15)\n\n    #assign colors based on attributes\n    weights_e   = [G[u][v]['weight'] for u,v in G.edges()]\n\n    #SAMPLE CMAP FOR COLORS \n    cmap=plt.cm.get_cmap('Blues')\n    colors_e    = [cmap(G[u][v]['weight']*10) for u,v in G.edges()]\n\n    #PLOT\n    nx.draw(\n    G,\n    edgecolors=\"black\",\n    edge_color=colors_e,\n    node_size=2000,\n    linewidths=2,\n    font_size=8,\n    font_color=\"white\",\n    font_weight=\"bold\",\n    width=weights_e,\n    with_labels=True,\n    pos=pos,\n    ax=ax\n    )\n    ax.set(title='Account Description of Users Sending rumors')\n    plt.show()\n\n\nresults = list(apriori(df, min_support=0.02, min_confidence=0.2, min_length=3, max_length=2))\npd_results = reformat_results(results)\nG = convert_to_network(pd_results)\nplot_network(G)\n\n\n               rhs             lhs  supp      conf  supp x conf       lift\n0           [aime]          [host]  0.02  1.000000     0.020000  10.000000\n1        [america]       [freedom]  0.02  0.400000     0.008000   5.000000\n2        [freedom]       [america]  0.02  0.250000     0.005000   5.000000\n3         [author]   [bestselling]  0.02  0.500000     0.010000  25.000000\n4    [bestselling]        [author]  0.02  1.000000     0.020000  25.000000\n5         [author]          [host]  0.02  0.500000     0.010000   5.000000\n6         [christ]         [jesus]  0.02  1.000000     0.020000  50.000000\n7          [jesus]        [christ]  0.02  1.000000     0.020000  50.000000\n8      [christian]  [conservative]  0.02  0.666667     0.013333  11.111111\n9   [conservative]     [christian]  0.02  0.333333     0.006667  11.111111\n10     [christian]       [freedom]  0.02  0.666667     0.013333   8.333333\n11       [freedom]     [christian]  0.02  0.250000     0.005000   8.333333\n12     [christian]          [life]  0.02  0.666667     0.013333  13.333333\n13          [life]     [christian]  0.02  0.400000     0.008000  13.333333\n14     [christian]           [pro]  0.02  0.666667     0.013333  11.111111\n15           [pro]     [christian]  0.02  0.333333     0.006667  11.111111\n16  [conservative]           [pro]  0.02  0.333333     0.006667   5.555556\n17           [pro]  [conservative]  0.02  0.333333     0.006667   5.555556\n18         [daily]        [mirror]  0.02  0.500000     0.010000  25.000000\n19        [mirror]         [daily]  0.02  1.000000     0.020000  25.000000\n20         [faith]        [family]  0.02  1.000000     0.020000  16.666667\n21        [family]         [faith]  0.02  0.333333     0.006667  16.666667\n22         [faith]       [freedom]  0.02  1.000000     0.020000  12.500000\n23       [freedom]         [faith]  0.02  0.250000     0.005000  12.500000\n24        [family]       [freedom]  0.03  0.500000     0.015000   6.250000\n25       [freedom]        [family]  0.03  0.375000     0.011250   6.250000\n26        [family]       [friends]  0.02  0.333333     0.006667  16.666667\n27       [friends]        [family]  0.02  1.000000     0.020000  16.666667\n28        [family]          [life]  0.02  0.333333     0.006667   6.666667\n29          [life]        [family]  0.02  0.400000     0.008000   6.666667\n30       [founder]          [host]  0.02  0.500000     0.010000   5.000000\n31       [founder]     [president]  0.02  0.500000     0.010000  12.500000\n32     [president]       [founder]  0.02  0.500000     0.010000  12.500000\n33       [freedom]          [life]  0.02  0.250000     0.005000   5.000000\n34          [life]       [freedom]  0.02  0.400000     0.008000   5.000000\n35       [freedom]           [pro]  0.03  0.375000     0.011250   6.250000\n36           [pro]       [freedom]  0.03  0.500000     0.015000   6.250000\n37           [get]          [life]  0.02  0.666667     0.013333  13.333333\n38          [life]           [get]  0.02  0.400000     0.008000  13.333333\n39          [ofhe]          [host]  0.02  0.666667     0.013333   6.666667\n40       [podcast]          [host]  0.02  1.000000     0.020000  10.000000\n41         [human]        [rights]  0.02  1.000000     0.020000  50.000000\n42        [rights]         [human]  0.02  1.000000     0.020000  50.000000\n43          [life]           [pro]  0.02  0.400000     0.008000   6.666667\n44           [pro]          [life]  0.02  0.333333     0.006667   6.666667\n45         [media]          [news]  0.02  0.400000     0.008000   6.666667\n46          [news]         [media]  0.02  0.333333     0.006667   6.666667\n47         [media]  [organization]  0.02  0.400000     0.008000  13.333333\n48  [organization]         [media]  0.02  0.666667     0.013333  13.333333\n49        [mother]          [wife]  0.02  1.000000     0.020000  50.000000\n50          [wife]        [mother]  0.02  1.000000     0.020000  50.000000\n51  [organization]     [political]  0.02  0.666667     0.013333  22.222222\n52     [political]  [organization]  0.02  0.666667     0.013333  22.222222"
  },
  {
    "objectID": "ARM.html#results",
    "href": "ARM.html#results",
    "title": "",
    "section": "Results",
    "text": "Results\nThe result include some common sense things, like “christ” appears with “jesus”, “conservative” appears with “christian”.\nHowever, there also exist some inspiring findings. “Political” appears with “organization”, meaning that the account tend to describe it as political organization, by reading the original data, this kind of organizations are the ones sending political information. That is align with the results of EDA, which shows that political topic is the main content of rumors.\nBesides,“family”,“life” and “freedom” appear together. Unfortunately, by reading the original data, this represent the core value of many users sending rumors."
  },
  {
    "objectID": "ARM.html#conclusion",
    "href": "ARM.html#conclusion",
    "title": "",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tab, apriori algorithm has been applied to analyzing the account description written by users who have sent rumors, to do mine the association rule.\nThe findings are that this kind of users may be an orgainzation sending political information, and they may underline the importance of a combination of family, life and freedom."
  },
  {
    "objectID": "ARM.html#reference",
    "href": "ARM.html#reference",
    "title": "",
    "section": "Reference",
    "text": "Reference\n[1]Remanan, S. (2018, November 2). Association rule mining. Medium. Retrieved December 2, 2022, from https://medium.com/towards-data-science/association-rule-mining-be4122fc1793"
  }
]