qqnorm(X3^alpha,ylim=c(0,1.1))
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1))
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1),main=as.character(alpha))
qqline(X3^alpha)
}
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1),main=paste("aplha=",as.character(alpha))
qqline(X3^alpha)
X1=rexp(10000,rate=2)
X2=rexp(10000,rate=2)
X3=X1+X2
for(alpha in seq(0.01,0.05,0.005)){
qqnorm(X3^alpha,ylim=c(0,1.1),main=paste("aplha=",as.character(alpha)))
qqline(X3^alpha)
}
library(openintro)
data(exam_grades)
qqnorm(exam_grades$exam1[!is.na(exam_grades)],main="the check on exam1")
qqline(exam_grades$exam1[!is.na(exam_grades)])
qqnorm(exam_grades$exam2[!is.na(exam_grades)],main="the check on exam2")
qqline(exam_grades$exam2[!is.na(exam_grades)])
qqnorm(exam_grades$exam3[!is.na(exam_grades)],main="the check on exam3")
qqline(exam_grades$exam3[!is.na(exam_grades)])
qqnorm(exam_grades$course_grade[!is.na(exam_grades)],main="the check on course grade")
qqline(exam_grades$course_grade[!is.na(exam_grades)])
library("tidyverse")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
getwd()
setwd("C:\Windows\System32\anly-501-project-FlynnFlag\codes\04-naive-bayes)
setwd("C:/Windows/System32/anly-501-project-FlynnFlag/codes/04-naive-bayes")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data
data
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data
library(e1071)
library("e1071")
install.packages("e1071")
install.packages("e1071")
library("tidyverse")
library("e1071")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$label,p = 0.8,list = FALSE)
# Confusion Matrix
#cm <- table(test_cl$Species, y_pred)
#cm
install.packages("caret")
library("tidyverse")
library("e1071")
library("caret")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$label,p = 0.8,list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
x_train<- training%>%
select(friends_count,followers_count,retweet_count,favorite_count)
y_train = training$label
model = train(x,y,'nb',trControl=trainControl(method='cv',number=10))
library("tidyverse")
library("e1071")
library("caret")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$label,p = 0.8,list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
x_train<- training%>%
select(friends_count,followers_count,retweet_count,favorite_count)
y_train = training$label
model = train(x_train,y_train,'nb',trControl=trainControl(method='cv',number=10))
library("tidyverse")
library("e1071")
library("caret")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$label,p = 0.8,list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
x_train<- training%>%
select(friends_count,followers_count,retweet_count,favorite_count)
y_train = training$label
model = train(x_train,y_train,'nb',trControl=trainControl(method='cv',number=10))
library("tidyverse")
library("e1071")
library("caret")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
#split data into training and test data sets
indxTrain <- createDataPartition(y = data$label,p = 0.8,list = FALSE)
training <- data[indxTrain,]
testing <- data[-indxTrain,]
x_train<- training%>%
select(friends_count,followers_count,retweet_count,favorite_count)
y_train = training$label
model = train(x_train,y_train,'nb',trControl=trainControl(method='cv',number=10))
library("tidyverse")
library("e1071")
library("caret")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(iris, SplitRatio = 0.7)
library("caTools")
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(iris, SplitRatio = 0.7)
train_cl <- subset(iris, split == "TRUE")
test_cl <- subset(iris, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
classifier_cl <- naiveBayes(Species ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
#cm <- table(test_cl$Species, y_pred)
#cm
y_pred <- predict(classifier_cl, newdata = test_cl)
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data, SplitRatio = 0.7)
split
split
train_cl <- subset(data, split == "TRUE")
# Splitting data into train and test data
split <- sample.split(data, SplitRatio = 0.7)
split
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
split
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
classifier_cl <- naiveBayes(Species ~ ., data = train_cl)
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
#cm <- table(test_cl$Species, y_pred)
#cm
cm <- table(test_cl$Species, y_pred)
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
library("tidyverse")
library("e1071")
library("caret")
library("caTools")
data=read_csv("../../data/01-modified-data/cleaned_supervised_data.csv")
data<- data%>%
select(friends_count,followers_count,retweet_count,favorite_count,label)
# Splitting data into train and test data
split <- sample.split(data$label, SplitRatio = 0.7)
train_cl <- subset(data, split == "TRUE")
test_cl <- subset(data, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 1:4])
test_scale <- scale(test_cl[, 1:4])
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(label ~ ., data = train_cl)
classifier_cl
# Predicting on test data'
y_pred <- predict(classifier_cl, newdata = test_cl)
# Confusion Matrix
cm <- table(test_cl$label, y_pred)
cm
